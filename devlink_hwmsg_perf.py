# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-trace-python Documentation for the list of available functions.

import os
import sys
import struct

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
	'/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *

#pcap_header = struct.pack("IHHiIII", 0xa1b2c3d4, 2, 4, 0, 0, 0xffff, 265)
pcap_header = struct.pack("IHHiIII", 0xa1b2c3d4, 2, 4, 0, 0, 0xffff, 0)

def pcap_packet_header(secs, usecs, pktlen):
    return struct.pack("IIII", secs, usecs, pktlen, pktlen)

def tlv_data(data_type, data):
    tlv_header = struct.pack("HH", data_type, len(data))
    return tlv_header + data

def trace_begin():
    sys.stdout = os.fdopen(1, "wb")
    sys.stdout.write(pcap_header)
    sys.stdout.flush()

#def trace_end():
#	print "in trace_end"

TLV_TYPE_BUS_NAME = 0
TLV_TYPE_DEV_NAME = 1
TLV_TYPE_DRIVER_NAME = 2
TLV_TYPE_INCOMING = 3
TLV_TYPE_TYPE = 4
TLV_TYPE_BUF = 5

def devlink__devlink_hwmsg(event_name, context, common_cpu, common_secs,
                           common_nsecs, common_pid, common_comm,
                           common_callchain, bus_name, dev_name, driver_name,
                           incoming, _type, _buf, _len):
    data = bytearray()
    data += tlv_data(TLV_TYPE_BUS_NAME, bus_name)
    data += tlv_data(TLV_TYPE_DEV_NAME, dev_name)
    data += tlv_data(TLV_TYPE_DRIVER_NAME, driver_name)
    data += tlv_data(TLV_TYPE_INCOMING, struct.pack("B", incoming))
    data += tlv_data(TLV_TYPE_TYPE, struct.pack("H", _type))
    buf = bytearray(_buf)
    data += tlv_data(TLV_TYPE_BUF, buf)
    
    sys.stdout.write(pcap_packet_header(common_secs, common_nsecs / 1000, len(data)))
    sys.stdout.write(data)
    sys.stdout.flush()
          
#		print "bus_name=%s, dev_name=%s, incoming=%u, " \
#		"type=%u, buf=%s, len=%u" % \
#		(bus_name, dev_name, incoming, type, 
#		buf, len)
#		print "\n"

def trace_unhandled(event_name, context, event_fields_dict):
		print ' '.join(['%s=%s'%(k,str(v))for k,v in sorted(event_fields_dict.items())])

#def print_header(event_name, cpu, secs, nsecs, pid, comm):
#	print "%-20s %5u %05u.%09u %8u %-20s " % \
#	(event_name, cpu, secs, nsecs, pid, comm),
